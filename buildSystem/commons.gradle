// v1.0.5

import java.util.regex.Pattern

// ========== TASKS ================================================================================

task updateLibrary {
    doLast {
        exec { commandLine "git", "fetch" }
        exec { commandLine "git", "pull" }
    }
}

task increaseBuildVersion {
    doLast {
        increaseBuildVersion()
        updateReadmeFile(getVersionName())
    }
}

task uploadLibrary {
    dependsOn updateLibrary
    doLast {
        exec { commandLine "git", "add", "-A" }
        exec { commandLine "git", "commit", "-m", "Update library" }
        exec { commandLine "git", "push" }
    }
}

task uploadRelease {
    dependsOn updateLibrary, increaseBuildVersion
    doLast {
        def versionName = getVersionName()
        def message = "Release " + versionName + " created"
        exec { commandLine "git", "add", "-A" }
        exec { commandLine "git", "commit", "-m", message }
        exec { commandLine "git", "push" }
        exec { commandLine "git", "tag", "-a", versionName, "-m", message }
        exec { commandLine "git", "push", "origin", versionName }
    }
}

// ========== METHODS ==============================================================================

void increaseBuildVersion() {
    println(":increaseBuildVersion - Incrementing build version...")
    def gradlePropsFile = file('../gradle.properties')
    if (gradlePropsFile.isFile() && gradlePropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(gradlePropsFile))
        def versionName = versionProps['VERSION_NAME']
        def patternVersionNumber = Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)")
        def matcherVersionNumber = patternVersionNumber.matcher(versionName)
        if (matcherVersionNumber.find()) {
            def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
            def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
            def buildVersion = Integer.parseInt(matcherVersionNumber.group(3)) + 1
            versionName = majorVersion + "." + minorVersion + "." + buildVersion
            versionProps['VERSION_NAME'] = matcherVersionNumber.replaceAll(versionName)
        }
        versionProps.store(gradlePropsFile.newWriter(), null)
    } else {
        throw new GradleException(":increaseBuildVersion - Could not read version.properties!")
    }
    println(":increaseBuildVersion - build version incremented to " + versionName)
}

String getVersionName() {
    def versionName
    def gradlePropsFile = file('../gradle.properties')
    if (gradlePropsFile.isFile() && gradlePropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(gradlePropsFile))
        versionName = versionProps['VERSION_NAME']
    }
    return versionName
}

void updateReadmeFile(version) {
    println(":updateReadmeFile - Updating readme file...")
    def readmeFile = file('../README.md')
    if (readmeFile.exists()) {
        readmeFile.delete()
    }
    def readmeTemplateFile = file('../README.template')
    if (readmeTemplateFile.canRead()) {
        def content = readmeTemplateFile.getText("UTF-8").replaceAll("\\{versionName\\}", version)
        readmeFile = new File("README.md")
        readmeFile.createNewFile()
        readmeFile.write(content, "UTF-8")
    }
    println(":updateReadmeFile - Readme file has been update")
}